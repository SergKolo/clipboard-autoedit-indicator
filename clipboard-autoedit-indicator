#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Author: Serg Kolo , contact: 1047481448@qq.com
# Date: January 21st, 2017
# Purpose: AppIndicator3 for automatic clipboard editing using 
#          regular expressions
# Tested on: Ubuntu 16.04 LTS
# Written for: http://askubuntu.com/q/873948/295286
# Icons by Zacharee1 http://askubuntu.com/users/274320/zacharee1
#
# Licensed under The MIT License (MIT).
# See included LICENSE file or the notice below.
#
# Copyright Â© 2016 Sergiy Kolodyazhnyy
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import gi
gi.require_version('AppIndicator3', '0.1')
gi.require_version('Notify', '0.7')
from gi.repository import AppIndicator3
from gi.repository import Notify
from gi.repository import Gtk
from gi.repository import Gdk
#from collections import OrderedDict
import subprocess
import signal
import json
import sys
import os
import re

class ClipboardAutoeditor(object):

    def __init__(self):
        self.app = AppIndicator3.Indicator.new(
            'clipboard-autoedit-indicator', "",
            AppIndicator3.IndicatorCategory.HARDWARE
            )

        self.debug = False 
        if len(sys.argv) == 2 and sys.argv[1] == 'debug':
            self.debug = True



        self.pattern = None
        self.replacement = None
        self.tool_choice = None
        self.old_edit = None 

        user_home = os.environ['HOME']
        self.config_file = os.path.join(user_home,'.clipboard-autoedit-config.json')
        if os.path.exists(self.config_file):
            try:
                self.read_config()
            except Exception as e:
                print(str(e))
                pass
        
        

        self.clip = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
        self.clip.connect('owner-change',self.handle_clipboard)
        self.edited = None

        self.editing_enabled = False

        self.toggle_button = None
        self.make_menu()

        self.notif = Notify.Notification.new("Notify")

        self.app.set_icon("clipboard-autoedit-active")
        self.app.set_attention_icon("clipboard-autoedit-inactive")
        self.app.set_status(AppIndicator3.IndicatorStatus.ATTENTION)

    def read_config(self):
        with open(self.config_file) as f:
             data = json.load(f)
             if self.debug:
                 print('>>> DEBUG: Contents of the config file\n',data)
             self.pattern = data['pattern']
             self.replacement = data['replacement']
             self.tool_choice = data['tool']
             if self.debug:
                 print('>>> DEBUG:',repr(self.pattern),repr(self.replacement))

    def write_config(self,pattern,replacement,tool):
        with open(self.config_file,'w') as f:
             data = { 'pattern':pattern,
                      'replacement':replacement,
                      'tool':tool  }
             json.dump(data,f,indent=4)

    def handle_clipboard(self,*args):

         if not self.editing_enabled: return
         text = self.clip.wait_for_text()
         if text == self.old_edit: return

         if self.debug:
             print(">>> DEBUG: Current clipboard content:" + text)
             print(">>> DEBUG: self.pattern:" + str(self.pattern))
         if not self.pattern : return

         new_text = None
         if self.tool_choice == 'python re':
             if re.search(self.pattern,text):
                 if self.debug: print('>>> DEBUG: Python Regex match')
                 new_text = re.sub(self.pattern,self.replacement,text)

                 if new_text != text:
                     self.send_notif(self.notif,__file__,'Clipboard edited')

         else:
                 if self.debug: print(">>> DEBUG: running sed")
                 cmd = ['sed','s/'+self.pattern+'/'+self.replacement+'/g']
                 proc =  subprocess.Popen(cmd,stdin=subprocess.PIPE,stdout=subprocess.PIPE)
                 proc.stdin.write(text.encode())
                 new_text = proc.communicate()[0].decode()
                 proc.stdin.close()
                 if new_text != text:
                     self.send_notif(self.notif,__file__,'Clipboard edited')
                 

         if new_text and new_text != text:
             if self.debug: print('>>> DEBUG: altering clipboard contents')
             self.old_edit = new_text
             self.clip.set_text(new_text,-1)


    def add_submenu(self,top_menu,label):
        menuitem = Gtk.MenuItem(label)
        submenu = Gtk.Menu()
        menuitem.set_submenu(submenu)
        top_menu.append(menuitem)
        menuitem.show()
        return submenu

    def add_menu_item(self, menu_obj, item_type, image, label, action, args):
        """ dynamic function that can add menu items depending on
            the item type and other arguments"""
        menu_item, icon = None, None
        if item_type is Gtk.ImageMenuItem and label:
            menu_item = Gtk.ImageMenuItem.new_with_label(label)
            menu_item.set_always_show_image(True)
            if '/' in image:
                icon = Gtk.Image.new_from_file(image)
            else:
                icon = Gtk.Image.new_from_icon_name(image, 48)
            menu_item.set_image(icon)
        elif item_type is Gtk.ImageMenuItem and not label:
            menu_item = Gtk.ImageMenuItem()
            menu_item.set_always_show_image(True)
            if '/' in image:
                icon = Gtk.Image.new_from_file(image)
            else:
                icon = Gtk.Image.new_from_icon_name(image, 16)
            menu_item.set_image(icon)
        elif item_type is Gtk.MenuItem:
            menu_item = Gtk.MenuItem(label)
        elif item_type is Gtk.SeparatorMenuItem:
            menu_item = Gtk.SeparatorMenuItem()
        if action:
            menu_item.connect('activate', action, *args)
        menu_obj.append(menu_item)
        menu_item.show()
        return menu_item

    def toggle_editing(self,*args):
#        if self.editing_enabled: self.editing_enabled = False
#        else: self.editing_enabled = True
         if self.toggle_button.get_active():
             self.editing_enabled = True
             self.app.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
             #self.app.set_icon("clipboard-autoedit-active")
         else:
             self.editing_enabled = False
             self.app.set_status(AppIndicator3.IndicatorStatus.ATTENTION)
             #self.app.set_icon("clipboard-autoedit-active")





    def make_menu(self,*args):
        """ generates entries in the indicator"""
        if hasattr(self, 'app_menu'):
            for item in self.app_menu.get_children():
                self.app_menu.remove(item)


        self.app_menu = Gtk.Menu()

        self.toggle_button = Gtk.CheckMenuItem('Replacement Enabled')
        self.app_menu.append(self.toggle_button)
        self.toggle_button.connect('activate',self.toggle_editing)
        self.toggle_button.show()

        item = [self.app_menu,Gtk.ImageMenuItem,
                'gtk-open','Show clipboard contents',
                self.show_clipboard,[None]]
        self.add_menu_item(*item)

        item = [self.app_menu,Gtk.ImageMenuItem,
                'gtk-preferences','Set regex pattern',
                self.set_regex,[None]]
        self.add_menu_item(*item)
        
        item = [self.app_menu,Gtk.ImageMenuItem,
                'exit','Quit',
                self.quit,[None]]
        self.add_menu_item(*item)

        self.app.set_menu(self.app_menu)

    def show_current_setting(self,*args):
        cmd = ['zenity','--error','--text','No config file exists']
        if os.path.exists(self.config_file):
            cmd = ['zenity','--text-info','--filename',self.config_file]
        self.run_cmd(cmd)

    def show_clipboard(self,*args):
        tmp = '/tmp/clip_autoedit.temp'
        with open('/tmp/clip_autoedit.temp','w') as f:
             text = self.clip.wait_for_text()
             f.write(text)
        cmd = ['zenity','--text-info','--filename',tmp]
        self.run_cmd(cmd)
        os.unlink(tmp)

    def set_regex(self,*args):
        cmd = ['zenity','--text',
               'Regex expression','--forms',
               '--add-entry=PATTERN', '--add-entry=REPLACEMENT',
               '--add-combo=REGEX TYPE','--combo-values', 'python re|sed',
               '--separator','\n']

        user_input = self.run_cmd(cmd)
 
        if user_input:
            #pattern_list = user_input.decode('unicode_escape').strip().split('\n')

            pattern_list = user_input.decode().strip().split('\n')
            print(pattern_list)
            self.pattern = pattern_list[0]
            self.replacement = pattern_list[1]

            self.tool_choice = 'python re'
            if len(pattern_list) == 3:
                self.tool_choice = pattern_list[2]

            self.write_config(self.pattern,self.replacement,self.tool_choice)
            #print(self.toggle_button.get_active())
            self.toggle_button.set_active(True)

    def send_notif(self, n, title, text):
        try:
            if Notify.init(__file__):
                n.update(title, text)
                n.set_urgency(2)
                if not n.show():
                    raise SyntaxError("sending notification failed!")
            else:
                raise SyntaxError("can't initialize notification!")
        except SyntaxError as error:
            if self.debug: print(">> DEBUG:",str(error))
            if error == "sending notification failed!":
                Notify.uninit()
        else:
            Notify.uninit()


    def run(self):
        """ Launches the indicator """
        Gtk.main()

    def quit(self,*args):
        """ closes indicator """
        Gtk.main_quit()

    def run_cmd(self, cmdlist):
        """ Reusable function for running external commands """
        try:
            stdout = subprocess.check_output(cmdlist)
        except subprocess.CalledProcessError as sperror:
            if self.debug: print(">>> DEBUG: subprocess error\n",repr(sperror))
        else:
            if stdout:
                return stdout



def main():
    """ defines program entry point """
    indicator = ClipboardAutoeditor()
    signal.signal(signal.SIGINT,signal.SIG_DFL)
    #              lambda sig, frame: indicator.quit())
    indicator.run()

if __name__ == '__main__':
    main()
